#!/usr/bin/env python3

import argparse
from exfi.exons_to_splicegraph import \
    exons_to_df, \
    exon_to_coordinates, \
    transcript_to_path, \
    compute_edge_overlaps, \
    build_splicegraph, \
    splicegraph_to_gfa1

from Bio import SeqIO
from os.path import isfile
from exfi import __version__

parser = argparse.ArgumentParser(
    usage='exons_to_splicegraph -i exome.fa -o exome.gfa',
    description='Store the predicted exome in GFA format',
    epilog='Jorge Langa. Send issues and pull requests to github.com/jlanga/'
           'exfi',
)

parser.add_argument(
    '--version',
    action='version',
    version='%(prog)s {version}'.format(
        version=__version__
    )
)

parser.add_argument(
    '--input-fasta',
    '-i',
    type=str,
    required=True,
    help='Input exome in FASTA format (the results from find_exons)',
    dest='input_fasta',
    metavar='FILE'
)

parser.add_argument(
    '--output-gfa',
    '-o',
    type=str,
    required=True,
    help='Path to output GFA1 file (the splice graph)',
    dest="output_gfa",
    metavar="FILE"
)

args = parser.parse_args()

if __name__ == "__main__":

    # Parse
    args = vars(parser.parse_args())
    input_fasta = args["input_fasta"]
    output_gfa = args["output_gfa"]

    # Check inputs
    assert isfile(input_fasta), "ERROR! Input fasta is not a file"
    exons = SeqIO.index(
        filename=input_fasta,
        format="fasta"
    )
    splice_graph = build_splicegraph(exons)
    paths = transcript_to_path(exons_to_df(exons)).to_dict()['path']
    splicegraph_to_gfa1(
        filename=output_gfa,
        paths=paths,
        splice_graph=splice_graph
    )
