#!/usr/bin/env python3

import argparse
from Bio import SeqIO
from exfi.filter_by_extensibility import filter_by_extensibility

parser = argparse.ArgumentParser(
    usage='filter_by_extensibility '
          '-i exons_raw.fa '
          '-b bloom.filter '
          '-k 27 -o exons.fa',
    description='Trim 5\' and 3\' end bases acording to their extensibility. '
                'Sequences with length < kmer will be thrown out also',
    epilog='Jorge Langa. Send issues and pull requests to github.com/jlanga/'
           'exon_finder'
)

parser.add_argument(
    '--input-fasta',
    '-i',
    type=str,
    required=True,
    help='Input exons in FASTA format',
    dest='input_fasta',
    metavar='FILE'
)

parser.add_argument(
    '--input-bloom',
    '-b',
    type=str,
    required=True,
    help='Bloom filter with genomic sequences (from abyss-bloom)',
    dest='bloom_filter',
    metavar='BLOOM'
)

parser.add_argument(
    '--kmer',
    '-k',
    type=int,
    required=True,
    help='The size of the k-mer (enter the same as in the bloom filter)',
    dest='kmer',
    metavar='KMER'
)

parser.add_argument(
    '--output-fasta',
    '-o',
    type=str,
    required=False,
    help='Path to output fasta file',
    dest="output_fasta",
    metavar="FILE"
)

args = parser.parse_args()

if __name__ == '__main__':

    # Get variables from the command line
    args = vars(parser.parse_args())
    input_fasta = args["input_fasta"]
    bloom_filter = args["bloom_filter"]
    kmer = args["kmer"]
    output_fasta = args["output_fasta"]

    # Check files exist and k is correct
    from os.path import isfile
    assert isfile(input_fasta), "ERROR!: input_fasta not found"
    assert isfile(bloom_filter), "ERROR!: Bloom filter not found"
    assert kmer > 0, "ERROR!: kmer is not a positive integer"

    # Run the pipeline
    exons = tuple(SeqIO.parse(
        handle=input_fasta,
        format="fasta"
    ))
    exons_filtered = filter_by_extensibility(
        exons=exons,
        bloom_filter=bloom_filter,
        kmer=kmer
    )
    SeqIO.write(
        handle=output_fasta,
        format="fasta",
        sequences=exons_filtered
    )
