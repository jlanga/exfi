#!/usr/bin/env python3

import argparse
from exfi import __version__
from exfi.build_baited_bloom_filter import build_baited_bloom_filter
import sys
from os.path import isfile, exists, dirname
from os import makedirs

parser = argparse.ArgumentParser(
    usage='build_baited_bloom_filter '
          '-i transcriptome.fa '
          '-o bloom_filter.bf '
          '-k 30 '
          'reads1.fq ... readsn.fq',
    description='Build a Bloom filter with reads that have at least one kmer '
                'in the transcriptome.',
    epilog='Jorge Langa. Send issues and pull requests to github.com/jlanga/'
           'exfi'
)

parser.add_argument(
    '--version',
    action='version',
    version='%(prog)s {version}'.format(
        version=__version__
    )
)

parser.add_argument(
    '--input-fasta', '-i',
    type=str,
    required=True,
    help='Input transcriptome in FASTA format',
    dest='input_fasta',
    metavar='FILE'
)

parser.add_argument(
    '--kmer', '-k',
    type=int,
    required=False,
    help='The size of the k-mer [30]',
    dest='kmer',
    metavar='INT',
    default=30
)

parser.add_argument(
    '--bloom-size', '-b',
    type=str,
    required=False,
    help="Size of the Bloom filter [500M]",
    dest="bloom_size",
    metavar='STR',
    default='500M'
)

parser.add_argument(
    '--levels', '-l',
    type=int,
    required=False,
    help='Build a cascading bloom filter with N levels and '
         'output the last level [1]',
    dest='levels',
    metavar='INT',
    default=1
)

parser.add_argument(
    '--threads', '-t',
    type=int,
    required=False,
    help='Number of threads to build Bloom filters and bait reads',
    dest='threads',
    metavar='INT',
    default=1
)

parser.add_argument(
    '--output-bloom', '-o',
    type=str,
    required=True,
    help='Path to write the resulting Bloom filter',
    dest="output_bloom",
    metavar="STR"
)

parser.add_argument(
    metavar='reads',
    type=str,
    nargs='+',
    help='FASTA/Q files (gz or not)',
    dest='reads'
)

args = parser.parse_args()

if __name__ == '__main__':

    # sys.stderr.write("")

    # Store arguments
    args = vars(parser.parse_args())
    transcriptome = args['input_fasta']
    kmer = args['kmer']
    bloom_size = args['bloom_size']
    levels = args['levels']
    output_bloom = args['output_bloom']
    threads = args["threads"],
    reads = args["reads"]

    threads = int(*threads)  # I don't know why it is parsed as tuple

    # Check inputs
    assert isfile(transcriptome), 'ERROR: input fasta does not exist'
    assert kmer >= 1, 'ERROR: incorrect kmer size'
    # assert bloom_size
    assert levels >= 1, 'ERROR: incorrect number of levels'
    assert threads >= 1, 'ERROR: incorrect number of threads'
    for read_file in reads:
        assert isfile(read_file), 'ERROR: file {file} does not exist'.format(
            file=read_file
        )

    # Check if programs are in path
    from shutil import which
    assert which('biobloommaker') is not None, \
        'ERROR: biobloommaker not in PATH'
    assert which('biobloomcategorizer') is not None, \
        'ERROR: biobloomcategorizer not in path'
    assert which('abyss-bloom') is not None, \
        'ERROR: abyss-bloom not in path'

    # Create output folder if it doesn't exist
    output_dir = dirname(output_bloom)
    if output_dir != "" and not exists(output_dir):
        makedirs(output_dir)

    # Run the program

    build_baited_bloom_filter(
        transcriptome=transcriptome,
        kmer=kmer,
        bloom_size=bloom_size,
        levels=levels,
        output_bloom=output_bloom,
        threads=threads,
        reads=reads
    )
