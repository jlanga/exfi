#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser(
    usage = 'filter_by_extensibility '
        '-i exons_raw.fa '
        '-b bloom.filter '
        '-k 27 -o exons.fa',
    description='Trim 5\' and 3\' end bases acording to their extensibility. Sequences with length < kmer will be thrown out also',
    epilog = 'Jorge Langa. Send issues and pull requests to github.com/jlanga/'
        'exon_finder'
)

parser.add_argument(
    '--input-fasta',
    '-i',
    type = str,
    required = True,
    help = 'Input exons in FASTA format',
    dest = 'input_fasta',
    metavar = 'FILE'
)

parser.add_argument(
    '--input-bloom',
    '-b',
    type = str,
    required = True,
    help = 'Bloom filter with genomic sequences (from abyss-bloom)',
    dest = 'bloom_filter',
    metavar = 'BLOOM'
)

parser.add_argument(
    '--kmer',
    '-k',
    type = int,
    required = True,
    help = 'The size of the k-mer (enter the same as in the bloom filter)',
    dest = 'kmer',
    metavar = 'KMER'
)

parser.add_argument(
    '--output-fasta',
    '-o',
    type = str,
    required = False,
    help = 'Path to output fasta file',
    dest = "output_fasta",
    metavar = "FILE"
)

args = parser.parse_args()

def run_pipeline(input_exons, bloom_filter, kmer, output_exons):

    # Import shit
    from Bio import SeqIO  # To read and write fastas
    from exfi.extend import extend_left, extend_right
    from exfi.filter_by_length import filter_by_length
    from subprocess import Popen, PIPE
    from itertools import chain
    import sys

    # Read raw exons. Use list since we will process it three times:
    # - one to compute left extensions,
    # - one to compute the right extensions, and
    # - one to trim and filter
    
    print("Reading input exons", file= sys.stderr)
    exons = list(SeqIO.parse(
        handle = input_exons, 
        format= "fasta"
    ))

    print("Computing all extensions", file= sys.stderr)
    # Compute left and right extensions
    # - Use `extend_left` and `extend_right`
    extensions = chain(
        extend_left(exons, kmer),
        extend_right(exons, kmer)
    )

    # - Write all of them in a temp file
    from tempfile import NamedTemporaryFile
    prefix = NamedTemporaryFile()
    extensions_raw = prefix.name + "_raw.fa"
    extensions_filtered = prefix.name + "_filtered.fa"
    SeqIO.write(
        sequences = extensions,
        handle = extensions_raw,
        format="fasta"
    )
    
    print("Checking which are possible", file= sys.stderr)
    # - Use `abyss-bloom kmers` to find out which extensions are there
    command_kmers = [  # Run abyss-bloom kmers
        "abyss-bloom", "kmers",
            "--kmer", str(kmer),
            "--verbose",
            bloom_filter,
            extensions_raw
    ]
    out_handle = open(extensions_filtered, "w")
    process_kmers = Popen(command_kmers, stdout = out_handle)
    outs, errs = process_kmers.communicate()


    # - Read the results (as a generator)
    extensions = SeqIO.parse(handle = extensions_filtered, format = "fasta")


    print("Trimming by extensibility", file= sys.stderr)
    # - Process the extensions by name
    # i.e., from EXONXXXXXXXX[l|r]["ACGT"] just get the EXONXXXXXXX[l|r]
    extension_names = set([extension.id.split(":")[0][:-1] for extension in extensions])
    for exon in exons:
        if exon.id + "l" not in extension_names:
            exon.seq = exon.seq[1:]
        if exon.id + "r" not in extension_names:
            exon.seq = exon.seq[:-1]

    print("Filtering by length and writing to disk", file= sys.stderr)
    exons = filter_by_length(iterables=exons, length=kmer)
    SeqIO.write(sequences= exons, handle = output_exons, format= "fasta" )
    print("Done", file= sys.stderr)


if __name__ == '__main__':

    # Get variables from the command line
    args = vars(parser.parse_args())
    input_fasta = args["input_fasta"]
    bloom_filter = args["bloom_filter"]
    kmer = args["kmer"]
    output_fasta = args["output_fasta"]

    # Check files exist and k is correct
    from os.path import isfile
    assert isfile(input_fasta), "ERROR!: input_fasta not found"
    assert isfile(bloom_filter), "ERROR!: Bloom filter not found"
    assert kmer > 0, "ERROR!: kmer is not a positive integer"

    # Run the pipeline
    run_pipeline(
        input_exons= input_fasta,
        bloom_filter= bloom_filter,
        kmer= kmer,
        output_exons= output_fasta
    )


    


