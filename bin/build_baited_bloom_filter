#!/usr/bin/env python3

"""build_baited_bloom_filter: script to build a bloom filter from a set of
(genomic) reads that have related to a fasta file (a transcriptome)"""

import logging
from os.path import exists, dirname, abspath
from os import makedirs
from shutil import which

from exfi.arguments import build_baited_bloom_filter_args
from exfi.logger import set_up_logger

from exfi.build_baited_bloom_filter import build_baited_bloom_filter

if __name__ == '__main__':

    PARSER = build_baited_bloom_filter_args()

    # Store arguments
    ARGS = vars(PARSER.parse_args())
    ARGS["fasta"] = abspath(ARGS["fasta"])
    ARGS["bloom"] = abspath(ARGS["bloom"])
    ARGS["threads"] = int(ARGS["threads"])  # It is parsed as tuple

    # Set up the logger
    LOGGER = set_up_logger(ARGS)

    # Check inputs
    logging.info('Checking input parameters')
    assert ARGS["kmer"] >= 1, 'ERROR: incorrect kmer size'
    # assert bloom_size
    assert ARGS["levels"] >= 1, 'ERROR: incorrect number of levels'
    assert ARGS["threads"] >= 1, 'ERROR: incorrect number of threads'

    # Check if programs are in path
    logging.info('Checking if biobloom* and abyss-bloom are in $PATH')
    assert which('biobloommaker') is not None, \
        'ERROR: biobloommaker not in PATH'
    assert which('biobloomcategorizer') is not None, \
        'ERROR: biobloomcategorizer not in PATH'
    assert which('abyss-bloom') is not None, \
        'ERROR: abyss-bloom not in PATH'

    # Create output folder if it doesn't exist
    OUTPUT_DIR = dirname(ARGS["bloom"])
    if OUTPUT_DIR != "" and not exists(OUTPUT_DIR):
        makedirs(OUTPUT_DIR)

    # Run the program
    logging.info('Running build_baited_bloom_filter')
    build_baited_bloom_filter(ARGS)

    logging.info("Done!")
