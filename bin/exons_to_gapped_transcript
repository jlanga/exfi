#!/usr/bin/env python3

import argparse
from exfi.exons_to_gapped_transcript import \
    build_transcript_to_exon_dict, \
    exon_dict_to_gapped_transcript

from Bio import SeqIO
from os.path import isfile
from exfi import __version__


parser = argparse.ArgumentParser(
    usage='exons_to_gapped_transcript -i exome.fa -o gapped_transcripts.fa '
        '-n 100',
    description='Find exons in a transcriptome with WGS reads and a Bloom '
                'filter',
    epilog='Jorge Langa. Send issues and pull requests to github.com/jlanga/'
           'exfi',
)

parser.add_argument(
    '--version',
    action='version',
    version='%(prog)s {version}'.format(
        version=__version__
    )
)

parser.add_argument(
    '--input-fasta',
    '-i',
    type=str,
    required=True,
    help='Input exome in FASTA format (the results from find_exons)',
    dest='input_fasta',
    metavar='FILE'
)

parser.add_argument(
    '--output-fasta',
    '-o',
    type=str,
    required=True,
    help='Path to output fasta file (the gapped transcripts)',
    dest="output_fasta",
    metavar="FILE"
)

parser.add_argument(
    '--number-of-ns',
    '-n',
    type=int,
    required=False,
    help='Number of Ns to put between each exon',
    dest="number_of_ns",
    metavar="INT",
    default=100
)

args = parser.parse_args()

if __name__ == "__main__":

    # Parse
    args = vars(parser.parse_args())
    input_fasta = args["input_fasta"]
    output_fasta = args["output_fasta"]
    number_of_ns = args["number_of_ns"]

    # Check inputs
    assert isfile(input_fasta), "ERROR! Input fasta not found"
    assert number_of_ns > 0, "ERROR! The gap size must be a positive number"

    exome = SeqIO.parse(handle=input_fasta, format="fasta")
    transcript_to_exon = build_transcript_to_exon_dict(exome)
    pasted_transcripts = exon_dict_to_gapped_transcript(
        transcript_to_exon, input_fasta, number_of_ns
    )
    SeqIO.write(
        format="fasta", handle=output_fasta, sequences=pasted_transcripts
    )
