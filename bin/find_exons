#!/usr/bin/env python3

import argparse
import sys
from exfi.find_exons import \
    _get_fasta, \
    _find_exons_pipeline, \
    find_exons
from exfi.reduce_exons import reduce_exons
from Bio import SeqIO
from os.path import isfile
from exfi import __version__

parser = argparse.ArgumentParser(
    usage='find_exons -i transcriptome.fa -b bloom.filter -k 27 -o exons.fa',
    description='Find exons in a transcriptome with WGS reads and a Bloom '
                'filter',
    epilog='Jorge Langa. Send issues and pull requests to github.com/jlanga/'
           'exon_finder',
)

parser.add_argument(
    '--version',
    action='version',
    version='%(prog)s {version}'.format(
        version=__version__
    )
)

parser.add_argument(
    '--input-fasta',
    '-i',
    type=str,
    required=True,
    help='Input transcriptome in FASTA format',
    dest='input_fasta',
    metavar='FILE'
)

parser.add_argument(
    '--input-bloom',
    '-b',
    type=str,
    required=True,
    help='Bloom filter with genomic sequences (from abyss-bloom)',
    dest='bloom_filter',
    metavar='BLOOM'
)

parser.add_argument(
    '--kmer',
    '-k',
    type=int,
    required=True,
    help='The size of the k-mer (enter the same as in the bloom filter)',
    dest='kmer',
    metavar='KMER',
    default=27
)

parser.add_argument(
    '--output-fasta',
    '-o',
    type=str,
    required=True,
    help='Path to output fasta file',
    dest="output_fasta",
    metavar="FILE"
)

parser.add_argument(
    '--max-fp-bases',
    '-m',
    type=int,
    required=False,
    help='Maximum number of consecutive false positives [5]',
    dest="max_fp_bases",
    metavar="INT",
    default=5
)

args = parser.parse_args()

if __name__ == "__main__":

    args = vars(parser.parse_args())
    transcriptome = args["input_fasta"]
    bloom_filter = args["bloom_filter"]
    kmer = args["kmer"]
    output_fasta = args["output_fasta"]
    max_fp_bases = args["max_fp_bases"]

    # check inputs
    assert isfile(transcriptome), "ERROR!: input_fasta not found"
    assert isfile(bloom_filter), "ERROR!: Bloom filter not found"
    assert kmer > 0, "ERROR!: kmer is not a positive integer"
    assert max_fp_bases >= 0, "ERROR!: max_fp_bases is not a positive integer"
    
    # Get predicted exons in bed format
    positive_exons_bed = _find_exons_pipeline(
        kmer, bloom_filter, transcriptome, max_fp_bases
    )
    # Bed -> fasta
    transcriptome_dict = SeqIO.index(filename=transcriptome, format="fasta")
    positive_exons_fasta = _get_fasta(transcriptome_dict, positive_exons_bed)
    # Reduce
    exons = reduce_exons(positive_exons_fasta)  # Collapse identical exons into one
    # Write
    SeqIO.write(sequences=exons, handle=output_fasta, format="fasta")
