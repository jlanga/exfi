#!/usr/bin/env python3

"""compare_to_gff3: script to compare a transcriptome in gff3 format against
a GFA1 prediction from exfi
"""

import logging
import sys

import pandas as pd

from exfi.arguments import compare_to_gff_args
from exfi.logger import set_up_logger
from exfi.io.bed import BED3_COLS
from exfi.io.gfa1_to_bed import gfa1_to_bed4
from exfi.io.gff3_to_bed import gff3_to_bed3
from exfi.io.read_bed import read_bed3
from exfi.io.fasta_to_dict import fasta_to_dict
from exfi.compare import \
    classify, \
    compute_stats_per_base, compute_stats_per_exon, compute_stats_per_ieb


if __name__ == '__main__':

    # Parse arguments
    PARSER = compare_to_gff_args()
    ARGS = vars(PARSER.parse_args())

    # Set up logger
    LOGGER = set_up_logger(ARGS)

    # Check what is being read
    if ARGS['input_splice_graph'].endswith(".bed"):
        logging.info("Input is BED")
        BED3_PRED = read_bed3(ARGS['input_splice_graph'])
    elif ARGS['input_splice_graph'].endswith(".gff3"):
        logging.info('Input is GFF3')
        BED3_PRED = gff3_to_bed3(ARGS['input_splice_graph'], mode='gmap')
    elif ARGS['input_splice_graph'].endswith(".gfa"):
        logging.info('Input is GFA1')
        BED3_PRED = gfa1_to_bed4(ARGS['input_splice_graph'])[BED3_COLS]
    else:
        sys.exit(
            "Unknown input file type: {file}\nValid file types are .bed .gfa .gff3".format(
                file=ARGS['input_splice_graph'])
        )

    # Process GFF3
    BED3_TRUE = gff3_to_bed3(ARGS['input_gff3'], mode='ensembl')

    # Filter out transcripts not present in the reference
    TRANSCRIPT_IDS = fasta_to_dict(ARGS['fasta']).keys()
    BED3_TRUE = BED3_TRUE[BED3_TRUE.chrom.isin(TRANSCRIPT_IDS)]
    del(TRANSCRIPT_IDS)


    CLASSIFICATION = classify(BED3_TRUE, BED3_PRED, fraction=ARGS['fraction'])

    EXON_STATS = compute_stats_per_exon(CLASSIFICATION)
    BASE_STATS = compute_stats_per_base(CLASSIFICATION)
    IEB_STATS = compute_stats_per_ieb(
        BED3_TRUE, BED3_PRED,
        max_distance=ARGS['max_distance']
    )

    EXON_STATS.insert(loc=0, column='type', value='per_exon')
    EXON_STATS.insert(loc=1, column='fraction/dist', value=ARGS['fraction'])

    BASE_STATS.insert(loc=0, column='type', value='per_base')
    BASE_STATS.insert(loc=1, column='fraction/dist', value=ARGS['fraction'])

    IEB_STATS.insert(loc=0, column='type', value='per_ieb')
    IEB_STATS.insert(loc=1, column='fraction/dist', value=ARGS['max_distance'])

    pd.concat([EXON_STATS, BASE_STATS, IEB_STATS])\
        .to_csv(path_or_buf=sys.stdout, sep='\t', index=False)
