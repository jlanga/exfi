#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser(
    usage = 'python3 fill_microindels.py -i input.fa -i bloom.filter -k 27 '
        '-o out.fa',
    description='Fill small indels within introns with help of abyss-sealer',
    epilog = 'Jorge Langa. Send issues and pull requests to github.com/jlanga/'
        'exon_finder'
)

parser.add_argument(
    '--input-fasta',
    '-i',
    type = str,
    required = True,
    help = 'Fasta file with sequences. Ns within the sequence will be filled',
    dest = 'input_fasta',
    metavar = 'FILE'
)

parser.add_argument(
    '--input-bloom',
    '-b',
    type = str,
    required = True,
    help = 'Bloom filter of genomic sequences (from abyss-bloom)',
    dest = 'bloom_filter',
    metavar = 'FILE'
)

parser.add_argument(
    '--kmer',
    '-k',
    type = int,
    required = True,
    help = 'The size of the k-mer (same as the Bloom filter)',
    dest = 'kmer',
    metavar = 'INT'
)

parser.add_argument(
    '--max-gap-size',
    '-G',
    type = int,
    required = False,
    help = 'The maximum size of the gap to be filled',
    dest = 'max_gap_size',
    default = 50,
    metavar = 'INT'
)

parser.add_argument(
    '--output-fasta',
    '-o',
    type = str,
    required = False,
    help = 'Path to output file. Default is stdout',
    dest = "output_fasta",
    metavar = "FILE"
)


args = parser.parse_args()


def run_sealer(input_fasta, bloom_filter, kmer, max_gap_size, output_prefix):
    """(str, str, int, int, str) -> NoneType
    
    Run abyss-sealer with:
        - gapped fasta file from input_fasta_fn
        - kmer size kmer
        - bloom filter already constructed from bloom_filter_fn,
        - output_prefix as prefix for scaffold, merge and log file
        - a max gap size of max_gap_size
    """
    from subprocess import Popen, PIPE
    from sys import stderr
    
    sealer_command = [  # Run abyss-sealer kmers
        "abyss-sealer",
            "--input-scaffold", input_fasta,
            "--flank-length", str(kmer),
            "--max-gap-length", str(max_gap_size),
            "--kmer", str(kmer),
            "--input-bloom", bloom_filter,
            "--fix-errors",
            "--mask",
            "--output-prefix", output_prefix,
            "--verbose"
    ]

    sealer_process = Popen(sealer_command)
    outs, errs = sealer_process.communicate()
    # Throw away sdterr
    #for line in sealer_process.stderr.readlines():
    #    stderr.write("[abyss-sealer]\t" + line.decode())


if __name__ == "__main__":
    
    # Read args
    args = vars(parser.parse_args())
    input_fasta = args["input_fasta"]
    bloom_filter = args["bloom_filter"]
    kmer = args["kmer"]
    max_gap_size = args["max_gap_size"]
    output_fasta = args["output_fasta"]

    # Check files exist
    from os.path import isfile 
    assert isfile(input_fasta), "ERROR!: Input fasta not found"
    assert isfile(bloom_filter), "ERROR!: bloom filter not found"

    # Check integers
    assert kmer > 0 , "ERROR!: kmer size is not positive"
    assert max_gap_size > 0, "ERROR!: max_gap_size is not positiveS"

    # Prepare temporary files
    from tempfile import NamedTemporaryFile
    prefix = NamedTemporaryFile()
    scaffold_fn = prefix.name + "_scaffold.fa"
    merged_fn = prefix.name + "_merged.fa"
    log_fn = prefix.name + "_log.txt"

    run_sealer(
        input_fasta= input_fasta,
        kmer= kmer,
        bloom_filter= bloom_filter,
        output_prefix= prefix.name,
        max_gap_size= max_gap_size
    )

    import os
    from shutil import copy
    copy(dst= output_fasta, src= scaffold_fn)
    prefix.close()
    os.remove(scaffold_fn)
    os.remove(merged_fn)
    os.remove(log_fn)