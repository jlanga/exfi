#!/usr/bin/env python3

import argparse
from exfi.find_exons import \
    _get_fasta, \
    _find_exons_pipeline

from exfi.reduce_exons import \
    reduce_exons

from exfi.build_splicegraph import \
    _process_index, \
    exons_to_df, \
    exon_to_coordinates, \
    transcript_to_path, \
    compute_edge_overlaps, \
    build_splicegraph

from exfi.io import \
    write_gfa1

from Bio import SeqIO
from os.path import isfile
from exfi import __version__

parser = argparse.ArgumentParser(
    usage='build_splicegraph -i transcriptome.fa -b bloom_filter.bf -k 30 1-o exome.gfa',
    description='Store the predicted exome in GFA format',
    epilog='Jorge Langa. Send issues and pull requests to github.com/jlanga/'
           'exfi',
)

parser.add_argument(
    '--version',
    action='version',
    version='%(prog)s {version}'.format(
        version=__version__
    )
)

parser.add_argument(
    '--input-fasta',
    '-i',
    type=str,
    required=True,
    help='Input transcriptome in FASTA format',
    dest='input_fasta',
    metavar='FILE'
)

parser.add_argument(
    '--input-bloom',
    '-b',
    type=str,
    required=True,
    help='Bloom filter with genomic sequences (from build_baited_bloom_filter or'
        'abyss-bloom)',
    dest='bloom_filter',
    metavar='BLOOM'
)

parser.add_argument(
    '--kmer',
    '-k',
    type=int,
    required=True,
    help='The size of the k-mer (enter the same as in the bloom filter)',
    dest='kmer',
    metavar='KMER',
    default=27
)

parser.add_argument(
    '--max-fp-bases',
    '-m',
    type=int,
    required=False,
    help='Maximum number of consecutive false positives [5]',
    dest="max_fp_bases",
    metavar="INT",
    default=5
)

parser.add_argument(
    '--output-gfa',
    '-o',
    type=str,
    required=True,
    help='Path to output GFA1 file (the splice graph)',
    dest="output_gfa",
    metavar="FILE"
)

args = parser.parse_args()

if __name__ == "__main__":
    args = vars(parser.parse_args())

    # Get predicted exons in bed format
    positive_exons_bed = _find_exons_pipeline(
        args["kmer"], args["bloom_filter"], args["input_fasta"], args["max_fp_bases"]
    )

    # Bed -> fasta
    transcriptome_index = SeqIO.index(filename=args["input_fasta"], format="fasta")
    positive_exons_fasta = _get_fasta(transcriptome_index, positive_exons_bed)

    # Reduce and convert to dict
    # positive_exons_fasta = reduce_exons(positive_exons_fasta)
    exon_index = {exon.id: exon for exon in positive_exons_fasta}

    # Build splice graph
    splice_graph = build_splicegraph(exon_index)

    # Write to GFA1
    write_gfa1(
        splice_graph=splice_graph,
        exons=exon_index,
        filename=args["output_gfa"]
    )
    #print([x for x in transcriptome_index.keys()])
