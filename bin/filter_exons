#!/usr/bin/env python3

import argparse

parser = argparse.ArgumentParser(
    usage = 'filter_exons -i exons.fa -m 27 -trim_left 1 -trim_right 1 -o filtered_exons.fa',
    description='Trim and filter by length sequences',
    epilog = 'Jorge Langa. Send issues and pull requests to github.com/jlanga/'
        'exon_finder'
)


parser.add_argument(
    '--input-fasta',
    '-e',
    type = str,
    required = True,
    help = 'Input exons in FASTA format',
    dest = 'input_fasta',
    metavar = 'FILE'
)

parser.add_argument(
    '--minimum-length',
    '-m',
    type = int,
    required = False,
    help = 'Minimum length of a sequence to be retained [0]',
    default= 0,
    dest = 'minimum',
    metavar = 'INT'
)

parser.add_argument(
    '--trim-left',
    '-l',
    type = int,
    required = False,
    help = 'Number of bases to cut from the 5\' end',
    default= 0,
    dest = 'trim_left',
    metavar = 'INT'
)

parser.add_argument(
    '--trim-right',
    '-r',
    type = int,
    required = False,
    help = 'Number of bases to cut from the 3\' end',
    default= 0,
    dest = 'trim_right',
    metavar = 'INT'
)

parser.add_argument(
    '--output-fasta',
    '-o',
    type = str,
    required = True,
    help = 'File to write the suriving sequences in FASTA format',
    dest = 'output_fasta',
    metavar = 'FILE'
)

args = parser.parse_args()

if __name__ == '__main__':

    args = vars(parser.parse_args())

    input_fasta = args["input_fasta"]
    minimum = args["minimum"]
    trim_left = args["trim_left"]
    trim_right = args["trim_right"]
    output_fasta = args["output_fasta"]

    from exfi.read_fasta import read_fasta
    from exfi.trim_sequence import trim_sequence
    from exfi.filter_by_length import filter_by_length
    from exfi.write_fasta import write_fasta

    records = read_fasta(input_fasta)
    trimmed = trim_sequence(
        records,
        bases_to_the_left= trim_left,
        bases_to_the_right= trim_right
    )
    filtered = filter_by_length(trimmed, minimum)
    write_fasta(filtered, output_fasta)

