#!/usr/bin/env python3

import argparse

import logging

from os.path import \
    isfile, \
    abspath

from Bio import SeqIO

from exfi import __version__

from exfi.find_exons import \
    _get_fasta, \
    _find_exons_pipeline

from exfi.build_splice_graph_dict import \
    build_splice_graph_dict

from exfi.correct import \
    correct_splice_graph_dict

from exfi.polish import \
    polish_splice_graph_dict

from exfi.io.fasta_to_dict import \
    fasta_to_dict

from exfi.io.splice_graph_dict_to_gfa1 import \
    splice_graph_dict_to_gfa1

from exfi.collapse import \
    collapse_splice_graph_dict



parser = argparse.ArgumentParser(
    usage='build_splicegraph -i transcriptome.fa -b bloom_filter.bf -k 30 -o exome.gfa',
    description='Store the predicted exome in GFA format',
    epilog='Jorge Langa. Send issues and pull requests to github.com/jlanga/'
           'exfi',
)

parser.add_argument(
    '--version',
    action='version',
    version='%(prog)s {version}'.format(
        version=__version__
    )
)

parser.add_argument(
    '--input-fasta',
    '-f',
    type=str,
    required=True,
    help='Input transcriptome in FASTA format',
    dest='fasta',
    metavar='FILE'
)

parser.add_argument(
    '--input-bloom',
    '-b',
    type=str,
    required=True,
    help='Bloom filter with genomic sequences (from build_baited_bloom_filter or'
        'abyss-bloom)',
    dest='bloom',
    metavar='BLOOM'
)

parser.add_argument(
    '--kmer-size',
    '-k',
    type=int,
    required=True,
    help='The size of the k-mer (enter the same as in the bloom filter) [31]',
    dest='kmer',
    metavar='KMER',
    default=31
)

parser.add_argument(
    '--max-fp-bases',
    '-m',
    type=int,
    required=False,
    help='Maximum number of consecutive false positives [5]',
    dest="max_fp_bases",
    metavar="INT",
    default=5
)

parser.add_argument(
    '--max-overlap',
    '-l',
    type=int,
    required=False,
    help='Maximum overlap in bp between pconsecutive exons (0 <= l <= k) [10]',
    dest='max_overlap',
    metavar='INT',
    default=10
)

parser.add_argument(
    '--max-gap-size',
    '-g',
    type=int,
    required=False,
    help="Maximum gap size between predicted exons to try to fill with sealer [10]",
    dest="max_gap_size",
    metavar='INT',
    default=10
)

parser.add_argument(
    '--output-gfa',
    '-o',
    type=str,
    required=True,
    help='Path to output GFA1 file (the splice graph)',
    dest="gfa1",
    metavar="FILE"
)

parser.add_argument(
    '--collapse',
    '-c',
    help='Collapse splice graph by exon sequence [False]',
    dest='collapse',
    action="store_true"
)

parser.add_argument(
    '--correct',
    '-C',
    help='Correct splice graph by using sealer between exons that seem nearby [False]',
    dest='correct',
    action="store_true"
)

parser.add_argument(
    "-v", "--verbose",
    action="store_true",
    dest="verbose",
    help="Increase output verbosity"
)

parser.add_argument(
    "-t", "--threads",
    type=int,
    help='number of threads to use when possible [1]',
    dest="threads",
    metavar="INT",
    default=1
)

parser.add_argument(
    "-p", "--polish",
    action="store_true",
    dest="polish",
    help="Polish overlaps in which a AG-GT signal is detected"
)


args = parser.parse_args()

if __name__ == "__main__":

    args = vars(parser.parse_args())
    # Convert relative paths to absolute paths, just in case
    args["bloom"] = abspath(args["bloom"])
    args["fasta"] = abspath(args["fasta"])
    args["gfa1"] = abspath(args["gfa1"])

    # Set up logger
    if args["verbose"]:
        logging.basicConfig(level=logging.INFO, format='%(asctime)s %(message)s')
    else:
        logging.basicConfig(level=logging.CRITICAL, format='%(asctime)s %(message)s')

    # Get predicted exons in bed format
    positive_exons_bed = _find_exons_pipeline(args)

    # Build splice graph
    splice_graph_dict = build_splice_graph_dict(positive_exons_bed, args)

    # Transcriptome_dict
    transcriptome_dict = fasta_to_dict(args["fasta"])

    if args["polish"]:
        splice_graph_dict = polish_splice_graph_dict(splice_graph_dict, transcriptome_dict, args)

    if args["correct"]:
        splice_graph_dict = correct_splice_graph_dict(splice_graph_dict, args)

    if args["collapse"]:
        splice_graph_dict = {
            "collapsed": collapse_splice_graph_dict(
                splice_graph_dict=splice_graph_dict,
                transcriptome_dict=transcriptome_dict
            )
        }

    # Write to GFA1
    splice_graph_dict_to_gfa1(
        splice_graph_dict=splice_graph_dict,
        transcriptome_dict=transcriptome_dict,
        filename=args["gfa1"]
    )
